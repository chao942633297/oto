<?php

namespace app\home\controller;


use think\Controller;
use think\Db;
use think\Exception;
use think\Request;

class Score extends Controller
{

    protected $userId;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userId = 1;
    }

    //积分兑换
    public function exchange()
    {
        $user = Db::table('users')->where('id', $this->userId)->find();
        $return = [];
        $return['balance'] = $user['balance'];
        $return['is_payPwd'] = 0;
        if ($user['pay_password']) {
            $return['is_payPwd'] = 1;
        }
        return json(['data' => $return, 'msg' => '查询成功', 'code' => 200]);
    }


    public function actExchange(Request $request)
    {
        $money = $request->param('balance');
        $payment = $request->param('payment');
        $user = Db::table('users')->where('id', $this->userId)->find();
        if ($payment == 1) {                   //粮票支付
            $password = $request->param('password');
            if (empty($password) || md5($password) !== $user['pay_password']) {
                return json(['msg' => '支付密码错误', 'code' => 1001]);
            }
            if (empty($money) || $money <= 0) {
                return json(['msg' => '充值金额错误', 'code' => 1002]);
            } else if (is_int($money)) {
                return josn(['msg' => '充值金额只能是整数', 'code' => 1002]);
            } else if ($money > $user['balance']) {
                return json(['msg' => '充值金额大于粮票余额', 'code' => 1002]);
            }
            Db::startTrans();
            try {
                //扣除用户余额(粮票)
                $user->balance -= $money;
                $user->save();
                //增加积分记录
                $this->insertData($this->userId, $money, '粮票充值');
                $res = Db::table('users')->where('id', $this->userId)->value('balance');
                if ($res < 0) {
                    Db::rollback();
                    return json(['msg' => '充值失败', 'code' => 1003]);
                }
                Db::commit();
                return json(['msg' => '充值成功', 'code' => 200]);
            } catch (Exception $e) {
                Db::rollback();
                return json(['msg' => '充值失败', 'code' => 1003]);
            }
        } else {
            $order = [];
            $order['pay_order_num'] = order_sn();
            $order['uid'] = $this->userId;
            $order['price'] = $money;
            $order['is_score'] = 2;
            if ($payment == 2) {
                //支付宝支付
                $order['payment'] = 2;
                $res = Db::table('order')->insertGetId($order);
                if ($res) {
                    $url = "http://" . config('back_url') . "/home/Alipay/webPay?orderId=" . $res;
                    return json(['data' => $url, 'msg' => '支付宝支付', 'code' => 200]);
                }
            }
            if ($payment == 3) {
                $order['payment'] = 3;
                $res = Db::table('order')->insertGetId($order);
                if ($res) {
                    $wechat_url = "http://" . config('back_url') . "/home/wxpay/wechatPay?orderId=" . $res;
                    return json(['data' => $wechat_url, 'msg' => '微信支付', 'code' => 200]);
                }
            }

        }
    }

//增加积分记录
    public function insertData($userId, $money, $remark)
    {
        $data = [];
        $data['uid'] = $userId;
        $data['value'] = $money;
        $data['is_add'] = 1;
        $data['type'] = 1;
        $data['source'] = $userId;
        $data['message'] = $remark;
        $data['created_at'] = time();
        $res = Db::table('integral')->insert($data);
        return $res;
    }


}


